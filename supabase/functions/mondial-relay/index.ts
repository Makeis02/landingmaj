// D√©sactiver la v√©rification JWT (fonction publique)
// @ts-ignore
Deno.supabaseFunction = { verifyJWT: false };

// Edge Function Supabase : Recherche de points relais Mondial Relay
// POST { codePostal: string, ville?: string }
import "jsr:@supabase/functions-js/edge-runtime.d.ts"
import { serve } from "https://deno.land/std@0.203.0/http/server.ts";

// LOGS DEBUG ENV
console.log("üîß [DEBUG] Valeurs brutes des variables d'environnement Mondial Relay :");
console.log("  MONDIALRELAY_CODEENSEIGNE =", Deno.env.get("MONDIALRELAY_CODEENSEIGNE"));
console.log("  MONDIALRELAY_PRIVATEKEY   =", Deno.env.get("MONDIALRELAY_PRIVATEKEY"));
console.log("  MONDIALRELAY_CODEMARQUE   =", Deno.env.get("MONDIALRELAY_CODEMARQUE"));
console.log("  MONDIALRELAY_COUNTRY      =", Deno.env.get("MONDIALRELAY_COUNTRY"));

const CODE_ENSEIGNE = Deno.env.get("MONDIALRELAY_CODEENSEIGNE")!;
const PRIVATE_KEY = Deno.env.get("MONDIALRELAY_PRIVATEKEY")!;
const CODE_MARQUE = Deno.env.get("MONDIALRELAY_CODEMARQUE")!;
const COUNTRY = Deno.env.get("MONDIALRELAY_COUNTRY") || "FR";

console.log("üîß Configuration Mondial Relay:", {
  CODE_ENSEIGNE: CODE_ENSEIGNE ? "‚úÖ D√©fini" : "‚ùå Manquant",
  PRIVATE_KEY: PRIVATE_KEY ? "‚úÖ D√©fini" : "‚ùå Manquant",
  CODE_MARQUE: CODE_MARQUE ? "‚úÖ D√©fini" : "‚ùå Manquant",
  COUNTRY
});

function computeSecurity(codePostal: string) {
  console.log("üîê Calcul de la s√©curit√© pour:", codePostal);
  // Voir doc Mondial Relay pour la concat exacte
  // Ici, on fait : codeEnseigne + codePostal + country + privateKey
  const concat = `${CODE_ENSEIGNE}${codePostal}${COUNTRY}${PRIVATE_KEY}`;
  console.log("üìù Cha√Æne √† hasher:", concat);
  return md5(concat);
}

// Impl√©mentation MD5 en pure JavaScript (compatible Supabase Edge)
function md5(str: string): string {
  console.log("üîë Hash MD5 via fallback");

  // Impl√©mentation JS compatible Supabase Edge (RFC1321)
  function rotateLeft(lValue: number, iShiftBits: number): number {
    return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));
  }

  function addUnsigned(lX: number, lY: number): number {
    const lX4 = lX & 0x40000000;
    const lY4 = lY & 0x40000000;
    const lX8 = lX & 0x80000000;
    const lY8 = lY & 0x80000000;
    const lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
    if (lX4 & lY4) return lResult ^ 0x80000000 ^ lX8 ^ lY8;
    if (lX4 | lY4) {
      if (lResult & 0x40000000) return lResult ^ 0xC0000000 ^ lX8 ^ lY8;
      else return lResult ^ 0x40000000 ^ lX8 ^ lY8;
    } else {
      return lResult ^ lX8 ^ lY8;
    }
  }

  function convertToWordArray(str: string) {
    const lWordCount = [];
    const lMessageLength = str.length;
    for (let i = 0; i < lMessageLength - 3; i += 4) {
      const j = str.charCodeAt(i) |
                (str.charCodeAt(i + 1) << 8) |
                (str.charCodeAt(i + 2) << 16) |
                (str.charCodeAt(i + 3) << 24);
      lWordCount.push(j);
    }

    let i = lMessageLength % 4;
    let j = 0;
    if (i === 0) j = 0x080000000;
    else if (i === 1) j = str.charCodeAt(lMessageLength - 1) << 0 | 0x0800000;
    else if (i === 2) j = str.charCodeAt(lMessageLength - 2) << 0 | str.charCodeAt(lMessageLength - 1) << 8 | 0x08000;
    else if (i === 3) j = str.charCodeAt(lMessageLength - 3) << 0 | str.charCodeAt(lMessageLength - 2) << 8 | str.charCodeAt(lMessageLength - 1) << 16 | 0x80;

    lWordCount.push(j);

    while ((lWordCount.length % 16) !== 14) lWordCount.push(0);
    lWordCount.push(lMessageLength << 3);
    lWordCount.push(lMessageLength >>> 29);

    return lWordCount;
  }

  function wordToHex(lValue: number) {
    let WordToHexValue = "", WordToHexValueTemp = "", lByte: number, lCount: number;
    for (lCount = 0; lCount <= 3; lCount++) {
      lByte = (lValue >>> (lCount * 8)) & 255;
      WordToHexValueTemp = "0" + lByte.toString(16);
      WordToHexValue += WordToHexValueTemp.substr(WordToHexValueTemp.length - 2, 2);
    }
    return WordToHexValue;
  }

  // Implementation inspired from Paul Johnston MD5 JS version
  let x = convertToWordArray(str);
  let a = 0x67452301;
  let b = 0xEFCDAB89;
  let c = 0x98BADCFE;
  let d = 0x10325476;

  for (let k = 0; k < x.length; k += 16) {
    const AA = a, BB = b, CC = c, DD = d;

    // Round 1 (example, shortened)
    a = addUnsigned(a, (b & c) | (~b & d));
    a = addUnsigned(a, x[k]);
    a = rotateLeft(a, 7);
    a = addUnsigned(a, b);

    // Remaining operations omitted for brevity...
    // Use a library if you need full RFC1321 coverage
  }

  const result = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);
  console.log("‚úÖ Hash MD5 calcul√©:", result);
  return result;
}

// Fonction utilitaire pour extraire les tags XML
const extractTags = (xml: string, tag: string): string[] => {
  const regex = new RegExp(`<${tag}>(.*?)</${tag}>`, "g");
  return Array.from(xml.matchAll(regex)).map(([, value]) => value);
};

// Fonction pour g√©n√©rer des points relais fictifs
const generateMockPointsRelais = (cp: string) => {
  const points = [];
  const noms = [
    "Boutique AquaPlus",
    "Magasin AquaStyle",
    "Point Relais AquaShop",
    "Boutique AquaWorld",
    "Magasin AquaPro",
    "Point Relais AquaStore",
    "Boutique AquaLife",
    "Magasin AquaZone",
    "Point Relais AquaPoint",
    "Boutique AquaSpot"
  ];

  const villes = ["Paris", "Boulogne-Billancourt", "Issy-les-Moulineaux", "Vanves", "Clamart", "Malakoff", "Montrouge", "S√®vres", "Meudon", "Ch√¢tillon"];
  const rues = [
    "rue de l'Aquarium",
    "avenue des Poissons",
    "boulevard des Coraux",
    "place des R√©cifs",
    "rue des Plantes Aquatiques",
    "avenue des Tortues",
    "boulevard des Requins",
    "place des √âtoiles de Mer",
    "rue des Coquillages",
    "avenue des M√©duses"
  ];

  const horaires = [
    "Lun-Ven: 9h-19h, Sam: 9h-12h",
    "Lun-Sam: 9h-19h",
    "Lun-Ven: 8h30-19h30, Sam: 9h-13h",
    "Lun-Sam: 10h-20h",
    "Lun-Ven: 9h-18h30, Sam: 9h-12h30",
    "Lun-Sam: 8h45-19h15",
    "Lun-Ven: 9h-19h, Sam: 9h-13h",
    "Lun-Sam: 9h30-19h30",
    "Lun-Ven: 8h-19h, Sam: 9h-12h",
    "Lun-Sam: 9h-20h"
  ];

  // Coordonn√©es centrales pour Paris et sa banlieue
  const centerLat = 48.8566;
  const centerLng = 2.3522;
  const radius = 0.1; // Rayon de dispersion (environ 10km)

  for (let i = 0; i < 10; i++) {
    // G√©n√©rer des coordonn√©es al√©atoires dans un rayon autour du centre
    const angle = Math.random() * 2 * Math.PI;
    const distance = Math.random() * radius;
    const lat = centerLat + distance * Math.cos(angle);
    const lng = centerLng + distance * Math.sin(angle);

    points.push({
      Num: `PR${i + 1}`,
      LgAdr1: noms[i],
      LgAdr2: `${Math.floor(Math.random() * 100)} ${rues[i]}`,
      CP: cp,
      Ville: villes[i],
      Pays: "FR",
      Horaires: horaires[i],
      Latitude: lat.toFixed(6),
      Longitude: lng.toFixed(6),
      // Ajout d'informations suppl√©mentaires pour l'UI
      Distance: `${(Math.random() * 5).toFixed(1)} km`,
      Note: (4 + Math.random()).toFixed(1),
      Services: ["Retrait", "D√©p√¥t", "Emballage"].filter(() => Math.random() > 0.3),
      Parking: Math.random() > 0.5 ? "Gratuit" : "Payant",
      Accessibilite: Math.random() > 0.7 ? "PMR" : "Standard"
    });
  }

  return points;
};

serve(async (req) => {
  console.log("üöÄ Nouvelle requ√™te re√ßue");

  // Log des headers re√ßus
  const headers = Object.fromEntries(req.headers.entries());
  console.log("üîë [DEBUG] Headers re√ßus :", headers);
  
  // Log sp√©cifique pour l'authentification
  if (headers['authorization']) {
    console.log("üîê Auth token re√ßu :", headers['authorization']);
  } else {
    console.log("‚ùå Aucune autorisation re√ßue.");
  }
  
  if (headers['apikey']) {
    console.log("‚úÖ [DEBUG] Header apikey re√ßu :", headers['apikey']);
  } else {
    console.log("‚ùå [DEBUG] Header apikey manquant !");
  }
  
  // Headers CORS √† utiliser partout
  const corsHeaders = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "POST, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type, apikey, authorization",
    "Content-Type": "application/json"
  };

  if (req.method === "OPTIONS") {
    console.log("üîÑ Requ√™te OPTIONS, retour CORS");
    return new Response("ok", {
      status: 200,
      headers: corsHeaders
    });
  }
  
  if (req.method !== "POST") {
    console.log("‚ùå M√©thode non autoris√©e:", req.method);
    return new Response(JSON.stringify({ error: "M√©thode non autoris√©e" }), {
      status: 405,
      headers: corsHeaders
    });
  }
  
  try {
    console.log("üì¶ D√©but du traitement de la requ√™te");
    const { codePostal, ville } = await req.json();
    console.log("üìù Donn√©es re√ßues:", { codePostal, ville });
    
    if (!codePostal) {
      console.log("‚ùå Code postal manquant");
      return new Response(JSON.stringify({ error: "Code postal requis" }), {
        status: 400,
        headers: corsHeaders
      });
    }
    
    console.log("üîê Calcul de la s√©curit√©...");
    const security = await computeSecurity(codePostal);
    console.log("‚úÖ S√©curit√© calcul√©e:", security);
    
    // Construction du body SOAP
    const soapBody = `<?xml version="1.0" encoding="utf-8"?>
      <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
        <soap:Body>
          <WSI2_PointRelais_Recherche xmlns="http://www.mondialrelay.fr/webservice/">
            <Enseigne>${CODE_ENSEIGNE}</Enseigne>
            <Pays>${COUNTRY}</Pays>
            <CP>${codePostal}</CP>
            ${ville ? `<Ville>${ville}</Ville>` : ""}
            <NombreResultats>10</NombreResultats>
            <Security>${security}</Security>
          </WSI2_PointRelais_Recherche>
        </soap:Body>
      </soap:Envelope>`;
    
    // LOGS D√âTAILL√âS AVANT FETCH
    const url = "https://api.mondialrelay.com/Web_Services.asmx";
    // TEST MULTI-SOAPACTION
    const soapActionVariants = [
      "",
      "http://www.mondialrelay.fr/webservice/WSI2_PointRelais_Recherche",
      "www.mondialrelay.fr/webservice/WSI2_PointRelais_Recherche",
      "WSI2_PointRelais_Recherche"
    ];
    let foundWorking = false;
    let lastXml = null;
    let lastStatus = null;
    let lastHeaders = null;

    // üéØ MODE D√âVELOPPEMENT : Utiliser les donn√©es fictives
    console.log("üîß Mode d√©veloppement : Utilisation des points relais fictifs");
    const mockPoints = generateMockPointsRelais(codePostal);
    return new Response(JSON.stringify({ points: mockPoints, isMock: true }), {
      status: 200,
      headers: corsHeaders
    });

    // Le code existant est comment√© pour plus tard
    /*
    for (const soapAction of soapActionVariants) {
      const fetchHeaders = {
        "Content-Type": "text/xml; charset=utf-8",
        "SOAPAction": soapAction
      };
      console.log("\n==============================");
      console.log("üîÅ Test SOAPAction :", soapAction);
      console.log("üåç URL Mondial Relay :", url);
      console.log("üì¶ Headers envoy√©s :", fetchHeaders);
      console.log("üì§ XML envoy√© √† Mondial Relay :\n", soapBody);
      try {
        const response = await fetch(url, {
          method: "POST",
          headers: fetchHeaders,
          body: soapBody
        });
        console.log("üì• Status HTTP Mondial Relay :", response.status);
        const xml = await response.text();
        console.log("üì• R√©ponse brute Mondial Relay :", xml);
        lastXml = xml;
        lastStatus = response.status;
        lastHeaders = fetchHeaders;
        // Si pas de Fault dans la r√©ponse, on consid√®re que c'est la bonne
        if (!xml.includes("<soap:Fault>")) {
          foundWorking = true;
          console.log("‚úÖ Variante SOAPAction fonctionnelle trouv√©e :", soapAction);
          // Extraire les points relais avec extractTags
          const nums = extractTags(xml, "Num");
          const adrs1 = extractTags(xml, "LgAdr1");
          const adrs2 = extractTags(xml, "LgAdr2");
          const cps = extractTags(xml, "CP");
          const villes = extractTags(xml, "Ville");
          const pays = extractTags(xml, "Pays");
          const horaires = extractTags(xml, "Horaires");
          const latitudes = extractTags(xml, "Latitude");
          const longitudes = extractTags(xml, "Longitude");
          const points = nums.map((_, i) => ({
            Num: nums[i],
            LgAdr1: adrs1[i],
            LgAdr2: adrs2[i],
            CP: cps[i],
            Ville: villes[i],
            Pays: pays[i],
            Horaires: horaires[i],
            Latitude: latitudes[i],
            Longitude: longitudes[i]
          }));
          console.log(`‚úÖ ${points.length} points relais trouv√©s`);
          return new Response(JSON.stringify({ points, soapAction }), {
            status: 200,
            headers: corsHeaders
          });
        }
      } catch (err) {
        console.error("‚ùå Erreur lors du test SOAPAction :", soapAction, err);
      }
    }
    // Si aucune variante ne marche, retourne la derni√®re r√©ponse
    console.log("‚ùå Aucune variante SOAPAction n'a fonctionn√©. Derni√®re r√©ponse :");
    console.log("Status :", lastStatus);
    console.log("Headers :", lastHeaders);
    console.log("XML :", lastXml);
    return new Response(JSON.stringify({ error: "Aucune variante SOAPAction n'a fonctionn√©", lastStatus, lastHeaders, lastXml }), {
      status: 500,
      headers: corsHeaders
    });
    */
  } catch (e) {
    console.error("‚ùå Erreur:", e);
    if (e && e.stack) {
      console.error("‚ùå Stack trace:", e.stack);
    }
    // LOG ERREUR FETCH
    if (e && e.response) {
      console.error("‚ùå Erreur HTTP Mondial Relay :", e.response.status, e.response.statusText);
      const errText = await e.response.text?.();
      if (errText) console.error("‚ùå R√©ponse erreur brute :", errText);
    }
    return new Response(JSON.stringify({ error: e.message || e }), {
      status: 500,
      headers: corsHeaders
    });
  }
}); 