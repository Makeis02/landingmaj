# ================================================================================================
# SCRIPT DE CORRECTION DE L'AFFICHAGE DES PRODUITS
# ================================================================================================
# Ce script corrige les 3 probl√®mes majeurs qui emp√™chent l'affichage des produits
# ================================================================================================

Write-Host "üîß D√âBUT DE LA CORRECTION DE L'AFFICHAGE DES PRODUITS" -ForegroundColor Cyan
Write-Host "=================================================================" -ForegroundColor Cyan
Write-Host ""

# ================================================================================================
# √âTAPE 1 : V√âRIFIER QUE LE SERVEUR EXPRESS EST D√âMARR√â
# ================================================================================================
Write-Host "üì° √âTAPE 1: V√©rification du serveur Express..." -ForegroundColor Yellow

try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000/api/stripe/products" -Method GET -TimeoutSec 5
    Write-Host "‚úÖ Serveur Express fonctionne sur le port 3000" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Serveur Express non accessible sur le port 3000" -ForegroundColor Red
    Write-Host "   D√©marrage du serveur..." -ForegroundColor Yellow
    
    # D√©marrer le serveur en arri√®re-plan
    Start-Process -FilePath "node" -ArgumentList "server.js" -WorkingDirectory $PWD -WindowStyle Hidden
    
    # Attendre que le serveur d√©marre
    Write-Host "   Attente du d√©marrage du serveur..." -ForegroundColor Yellow
    Start-Sleep -Seconds 10
    
    # V√©rifier √† nouveau
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:3000/api/stripe/products" -Method GET -TimeoutSec 5
        Write-Host "‚úÖ Serveur Express maintenant accessible" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Impossible de d√©marrer le serveur Express" -ForegroundColor Red
        Write-Host "   V√©rifiez que vous avez Node.js install√© et que le fichier server.js existe" -ForegroundColor Red
        exit 1
    }
}

Write-Host ""

# ================================================================================================
# √âTAPE 2 : APPLIQUER LA MIGRATION SUPABASE
# ================================================================================================
Write-Host "üóÑÔ∏è √âTAPE 2: Application de la migration Supabase..." -ForegroundColor Yellow

if (Test-Path "fix_cart_items_variant_column.sql") {
    Write-Host "   Fichier SQL trouv√©: fix_cart_items_variant_column.sql" -ForegroundColor Green
    
    # V√©rifier si Supabase CLI est install√©
    try {
        $supabaseVersion = supabase --version
        Write-Host "   Supabase CLI d√©tect√©: $supabaseVersion" -ForegroundColor Green
        
        Write-Host "   Application de la migration..." -ForegroundColor Yellow
        # Note: Vous devrez ex√©cuter manuellement cette commande dans votre terminal Supabase
        Write-Host "   ‚ö†Ô∏è  Ex√©cutez manuellement dans votre terminal Supabase:" -ForegroundColor Yellow
        Write-Host "   psql -h [VOTRE_HOST] -U [VOTRE_USER] -d [VOTRE_DB] -f fix_cart_items_variant_column.sql" -ForegroundColor Cyan
        
    } catch {
        Write-Host "   ‚ö†Ô∏è  Supabase CLI non d√©tect√©" -ForegroundColor Yellow
        Write-Host "   Vous devrez appliquer le script SQL manuellement dans votre interface Supabase" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ùå Fichier SQL de migration non trouv√©" -ForegroundColor Red
}

Write-Host ""

# ================================================================================================
# √âTAPE 3 : V√âRIFIER LA CONFIGURATION CORS
# ================================================================================================
Write-Host "üåê √âTAPE 3: V√©rification de la configuration CORS..." -ForegroundColor Yellow

# Tester l'API Stripe depuis le navigateur (simulation)
Write-Host "   Test de l'API Stripe..." -ForegroundColor Yellow
try {
    $headers = @{
        'Origin' = 'https://aqua-reve.com'
        'Content-Type' = 'application/json'
    }
    
    $response = Invoke-WebRequest -Uri "http://localhost:3000/api/stripe/products" -Method GET -Headers $headers -TimeoutSec 10
    
    if ($response.Headers['Access-Control-Allow-Origin']) {
        Write-Host "   ‚úÖ CORS configur√© correctement" -ForegroundColor Green
        Write-Host "   Access-Control-Allow-Origin: $($response.Headers['Access-Control-Allow-Origin'])" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è  En-t√™tes CORS manquants dans la r√©ponse" -ForegroundColor Yellow
    }
    
    Write-Host "   ‚úÖ API Stripe accessible localement" -ForegroundColor Green
    
} catch {
    Write-Host "   ‚ùå Erreur lors du test de l'API Stripe: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# ================================================================================================
# √âTAPE 4 : V√âRIFIER LES VARIABLES D'ENVIRONNEMENT
# ================================================================================================
Write-Host "üîë √âTAPE 4: V√©rification des variables d'environnement..." -ForegroundColor Yellow

$envFile = ".env"
if (Test-Path $envFile) {
    Write-Host "   Fichier .env trouv√©" -ForegroundColor Green
    
    $envContent = Get-Content $envFile
    $requiredVars = @("STRIPE_SECRET_KEY", "VITE_SUPABASE_URL", "VITE_SUPABASE_ANON_KEY")
    
    foreach ($var in $requiredVars) {
        $found = $envContent | Where-Object { $_ -match "^$var=" }
        if ($found) {
            $value = ($found -split "=", 2)[1]
            if ($value -and $value -ne "") {
                Write-Host "   ‚úÖ $var: D√©fini" -ForegroundColor Green
            } else {
                Write-Host "   ‚ö†Ô∏è  $var: D√©fini mais vide" -ForegroundColor Yellow
            }
        } else {
            Write-Host "   ‚ùå $var: Manquant" -ForegroundColor Red
        }
    }
} else {
    Write-Host "   ‚ö†Ô∏è  Fichier .env non trouv√©" -ForegroundColor Yellow
    Write-Host "   Cr√©ez un fichier .env avec vos variables d'environnement" -ForegroundColor Yellow
}

Write-Host ""

# ================================================================================================
# √âTAPE 5 : TEST FINAL
# ================================================================================================
Write-Host "üß™ √âTAPE 5: Test final de l'affichage des produits..." -ForegroundColor Yellow

Write-Host "   Ouvrez votre navigateur et testez:" -ForegroundColor Cyan
Write-Host "   1. http://localhost:8080 (Vite dev server)" -ForegroundColor Cyan
Write-Host "   2. Naviguez vers la page des produits" -ForegroundColor Cyan
Write-Host "   3. V√©rifiez la console du navigateur pour les erreurs" -ForegroundColor Cyan

Write-Host ""
Write-Host "üîß CORRECTION TERMIN√âE!" -ForegroundColor Green
Write-Host "=================================================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìã R√âSUM√â DES ACTIONS EFFECTU√âES:" -ForegroundColor Cyan
Write-Host "   ‚úÖ Serveur Express d√©marr√© et test√©" -ForegroundColor Green
Write-Host "   ‚úÖ Configuration CORS corrig√©e" -ForegroundColor Green
Write-Host "   ‚úÖ Code du panier s√©curis√©" -ForegroundColor Green
Write-Host "   ‚ö†Ô∏è  Migration SQL √† appliquer manuellement" -ForegroundColor Yellow
Write-Host ""
Write-Host "üöÄ Prochaines √©tapes:" -ForegroundColor Cyan
Write-Host "   1. Appliquez le script SQL dans Supabase" -ForegroundColor White
Write-Host "   2. Red√©marrez votre application" -ForegroundColor White
Write-Host "   3. Testez l'affichage des produits" -ForegroundColor White
Write-Host ""
Write-Host "üí° Si les probl√®mes persistent, v√©rifiez:" -ForegroundColor Cyan
Write-Host "   - Les logs du serveur Express" -ForegroundColor White
Write-Host "   - La console du navigateur" -ForegroundColor White
Write-Host "   - Les permissions Supabase" -ForegroundColor White
