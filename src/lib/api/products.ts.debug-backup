import slugify from 'slugify';

// Get API base URL from environment variables with fallback
const getApiBaseUrl = () => {
  // Use environment variable if available
  if (import.meta.env.VITE_API_URL) {
    return import.meta.env.VITE_API_URL;
  }
  
  // Fallback to current origin if in browser
  if (typeof window !== 'undefined') {
    return window.location.origin;
  }
  
  // Default fallback for SSR or other contexts
  return '';
};

export interface PageGenerationParams {
  productId: string;
  title: string;
  description: string;
  price: number;
  image: string;
  brandName: string;
  brandId: string | null;
  categories: Array<{ id: string; name: string }>;
}

// Cr√©e une page produit sur le serveur
export const createProductPage = async (params: PageGenerationParams): Promise<{ success: boolean; message: string; slug?: string }> => {
  try {
    const apiBaseUrl = getApiBaseUrl();
    console.log("üîç [DEBUG] D√©but de fetchProductDescriptions");
    console.log("‚è±Ô∏è [DEBUG] Timestamp:", new Date().toISOString());
    console.log("üîç [DEBUG] R√©cup√©ration des descriptions de produits depuis l'API...");
    console.log("üåê URL de l'API:", `${apiBaseUrl}/api/products/descriptions`);
    
    // Appeler l'API pour r√©cup√©rer les descriptions
    console.log("üåê [DEBUG] URL compl√®te:", `${apiBaseUrl}/api/products/descriptions`);
    const startTime = Date.now();
    console.log("‚è±Ô∏è [DEBUG] D√©but de la requ√™te fetch");
    const response = await fetch(`${apiBaseUrl}/api/products/descriptions`);
    const endTime = Date.now();
    console.log(`‚è±Ô∏è [DEBUG] Requ√™te fetch termin√©e en ${endTime - startTime}ms`);
    
    if (!response.ok) {
      console.error(`‚ùå [DEBUG] Erreur HTTP: ${response.status}`);
      const responseText = await response.text();
      console.error(`‚ùå [DEBUG] Contenu de la r√©ponse en erreur: ${responseText}`);
      throw new Error(`Erreur HTTP: ${response.status}`);
    }
    
    console.log("‚è±Ô∏è [DEBUG] D√©but parsing JSON");
    const data = await response.json();
    console.log("‚è±Ô∏è [DEBUG] Fin parsing JSON");
    console.log("üì¶ [DEBUG] Type de la r√©ponse:", typeof data);
    console.log("üì¶ [DEBUG] Structure de la r√©ponse:", Object.keys(data));
    
    // Validation des donn√©es re√ßues
    if (!data || typeof data !== 'object') {
      console.error(`‚ùå Format de r√©ponse invalide:`, data);
      return {};
    }
    
    // V√©rifier que le champ descriptions existe et est un objet
    if (!data.descriptions || typeof data.descriptions !== 'object') {
      console.error(`‚ùå Champ descriptions manquant ou invalide:`, data);
      return {};
    }
    
    const descriptions = data.descriptions || {};
    console.log("üì¶ [DEBUG] Type de data.descriptions:", typeof data.descriptions);
    console.log("üì¶ [DEBUG] Nombre de descriptions:", Object.keys(descriptions).length);
    
    // Normaliser les identifiants - convertir tous les IDs en cha√Ænes de caract√®res
    const normalizedDescriptions: Record<string, string> = {};
    Object.entries(descriptions).forEach(([id, desc]) => {
      // Convertir l'ID en cha√Æne de caract√®res
      const stringId = String(id);
      // V√©rifier que la description est une cha√Æne de caract√®res
      const stringDesc = typeof desc === 'string' ? desc : String(desc);
      normalizedDescriptions[stringId] = stringDesc;
    });
    
    console.log("‚úÖ Descriptions r√©cup√©r√©es:", Object.keys(normalizedDescriptions).length);
    
    // Debug: v√©rification des types de cl√©s et valeurs
    if (Object.keys(normalizedDescriptions).length > 0) {
      const sampleKeys = Object.keys(normalizedDescriptions).slice(0, 3);
      console.log("üîë Type des cl√©s:", typeof sampleKeys[0]);
      console.log("üìÑ √âchantillon des cl√©s:", sampleKeys);
      
      sampleKeys.forEach(key => {
        console.log(`üì¶ Description pour ${key}: ${normalizedDescriptions[key].substring(0, 30)}...`);
      });
    } else {
      console.log("‚ö†Ô∏è Aucune description r√©cup√©r√©e!");
    }
    
    console.log("üèÅ [DEBUG] Fin de fetchProductDescriptions, retourne", Object.keys(normalizedDescriptions).length, "descriptions");
    return normalizedDescriptions;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des descriptions:', error);
    return {};
  }
}; 