#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import slugify from 'slugify';

// Obtenir le r√©pertoire courant
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Chemin du dossier des produits
const productsDir = path.join(__dirname, 'src', 'pages', 'products');

async function fixProductExports() {
  console.log('üîç Recherche des pages produit √† corriger...');
  
  try {
    // V√©rifier si le dossier existe
    try {
      await fs.access(productsDir);
    } catch (err) {
      console.error(`‚ùå Le dossier ${productsDir} n'existe pas.`);
      return;
    }
    
    // Lister tous les fichiers
    const files = await fs.readdir(productsDir);
    const productFiles = files.filter(file => file.endsWith('.tsx'));
    
    console.log(`üìë Nombre de fichiers produit trouv√©s: ${productFiles.length}`);
    
    let correctedCount = 0;
    let alreadyCorrectCount = 0;
    let errorCount = 0;
    
    // Traiter chaque fichier
    for (const file of productFiles) {
      try {
        const filePath = path.join(productsDir, file);
        const fileContent = await fs.readFile(filePath, 'utf8');
        
        // G√©n√©rer le nom du composant React √† partir du nom de fichier
        const slug = file.replace('.tsx', '');
        const componentName = `Product${slug.charAt(0).toUpperCase() + slug.slice(1).replace(/-([a-z])/g, (g) => g[1].toUpperCase())}`;
        
        // V√©rifier si le fichier a d√©j√† le bon export
        const hasCorrectExport = fileContent.includes(`export default ${componentName};`);
        
        // V√©rifier si le composant est correctement d√©fini
        const hasCorrectComponentDef = fileContent.includes(`const ${componentName} =`);
        
        if (hasCorrectExport && hasCorrectComponentDef) {
          console.log(`‚úÖ ${file} est d√©j√† correct.`);
          alreadyCorrectCount++;
          continue;
        }
        
        // Cr√©er une copie modifi√©e du contenu
        let updatedContent = fileContent;
        
        // Remplacer toutes les d√©clarations de composant incorrectes
        if (!hasCorrectComponentDef) {
          // Rechercher diff√©rentes formes de d√©claration de composant
          const patterns = [
            /const\s+ProductPage\s*=/g,
            /const\s+Modele\s*=/g,
            // Essayer de trouver un composant avec un nom similaire
            new RegExp(`const\\s+Product[A-Z][a-zA-Z]*\\s*=`, 'g')
          ];
          
          let componentFound = false;
          for (const pattern of patterns) {
            if (updatedContent.match(pattern)) {
              updatedContent = updatedContent.replace(pattern, `const ${componentName} =`);
              componentFound = true;
              console.log(`üîÑ Remplac√© la d√©claration du composant dans ${file}`);
              break;
            }
          }
          
          if (!componentFound) {
            console.warn(`‚ö†Ô∏è Impossible de trouver une d√©claration de composant √† remplacer dans ${file}`);
          }
        }
        
        // Remplacer l'export incorrect
        if (!hasCorrectExport) {
          // Rechercher diff√©rentes formes d'export
          const exportPatterns = [
            /export\s+default\s+ProductPage;/g,
            /export\s+default\s+Modele;/g,
            /export\s+default\s+Product[A-Z][a-zA-Z]*;/g
          ];
          
          let exportFound = false;
          for (const pattern of exportPatterns) {
            if (updatedContent.match(pattern)) {
              updatedContent = updatedContent.replace(pattern, `export default ${componentName};`);
              exportFound = true;
              console.log(`üîÑ Remplac√© l'export dans ${file}`);
              break;
            }
          }
          
          // Si aucun export n'a √©t√© trouv√©, ajouter un export √† la fin du fichier
          if (!exportFound) {
            if (!updatedContent.includes('export default')) {
              updatedContent += `\nexport default ${componentName};\n`;
              console.log(`‚ûï Ajout√© un export manquant dans ${file}`);
            } else {
              console.warn(`‚ö†Ô∏è Un export est pr√©sent mais non reconnu dans ${file}`);
            }
          }
        }
        
        // Si le contenu a √©t√© modifi√©, √©crire les modifications
        if (updatedContent !== fileContent) {
          await fs.writeFile(filePath, updatedContent, 'utf8');
          console.log(`‚úÖ ${file} corrig√© avec succ√®s.`);
          correctedCount++;
        }
      } catch (err) {
        console.error(`‚ùå Erreur lors du traitement de ${file}:`, err);
        errorCount++;
      }
    }
    
    console.log('\nüìä R√©sum√©:');
    console.log(`  ‚úÖ ${alreadyCorrectCount} fichiers d√©j√† corrects`);
    console.log(`  üîÑ ${correctedCount} fichiers corrig√©s`);
    console.log(`  ‚ùå ${errorCount} fichiers avec erreurs`);
    
  } catch (err) {
    console.error('‚ùå Une erreur est survenue:', err);
  }
}

// Ex√©cuter la fonction principale
fixProductExports(); 